const Blog = require('../models/Blog');

// Get all blogs
const getBlogs = async (req, res) => {
    try {
        const blogs = await Blog.find().sort({ createdAt: -1 });
        res.json(blogs);
    } catch (err) {
        console.error('Error fetching blogs:', err);
        res.status(500).json({ message: 'Failed to fetch blogs' });
    }
};

// Get single blog by MongoDB _id
const getBlogById = async (req, res) => {
    try {
        const blog = await Blog.findById(req.params.id);
        if (!blog) {
            return res.status(404).json({ message: 'Blog not found' });
        }
        res.json(blog);
    } catch (err) {
        console.error('Error retrieving blog by _id:', err);
        res.status(500).json({ message: 'Error retrieving blog' });
    }
};

// Get single blog by custom ID (recommended approach)
const getBlogByCustomId = async (req, res) => {
    try {
        const customId = parseInt(req.params.id);
        if (isNaN(customId)) {
            return res.status(400).json({ message: 'Invalid ID format' });
        }

        const blog = await Blog.findOne({ id: customId });
        if (!blog) {
            return res.status(404).json({ message: 'Blog not found' });
        }
        res.json(blog);
    } catch (err) {
        console.error('Error retrieving blog by custom ID:', err);
        res.status(500).json({ message: 'Error retrieving blog' });
    }
};

// Add a new blog
const addBlog = async (req, res) => {
    try {
        const { id, title, date, paragraphs, image } = req.body;

        // Validation
        if (!id || !title || !date || !paragraphs || !Array.isArray(paragraphs) || paragraphs.length === 0) {
            return res.status(400).json({
                message: 'Missing required fields: id, title, date, and paragraphs array'
            });
        }

        // Check if blog with this custom ID already exists
        const existingBlog = await Blog.findOne({ id: id });
        if (existingBlog) {
            return res.status(409).json({ message: 'Blog with this ID already exists' });
        }

        // Create new blog (description will be auto-generated by virtual field)
        const newBlog = new Blog({
            id,
            title,
            date,
            paragraphs,
            image: image || null
        });

        await newBlog.save();
        res.status(201).json(newBlog);
    } catch (err) {
        console.error('Error adding blog:', err);
        if (err.code === 11000) {
            // Duplicate key error
            res.status(409).json({ message: 'Blog with this ID already exists' });
        } else {
            res.status(400).json({ message: 'Failed to add blog', error: err.message });
        }
    }
};

module.exports = {
    getBlogs,
    getBlogById,
    getBlogByCustomId,
    addBlog
};